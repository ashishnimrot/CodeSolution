import React, { useState } from 'react';
import { DialogContent, List, Divider, Grid, Button } from '@material-ui/core';
import ViewListIcon from '@material-ui/icons/ViewList';
import ViewModuleIcon from '@material-ui/icons/ViewModule';
import { makeStyles } from '@material-ui/core/styles';
import FileItem from './FileItem';

const useStyles = makeStyles((theme) => ({
  viewSwitchButton: {
    marginBottom: theme.spacing(1),
  },
}));

interface DialogContentComponentProps {
  files: { id: string; name: string; mimeType: string }[];
  onItemClick: (file: { id: string; name: string; mimeType: string }) => void;
}

const DialogContentComponent: React.FC<DialogContentComponentProps> = ({ files, onItemClick }) => {
  const classes = useStyles();
  const [viewMode, setViewMode] = useState<'list' | 'grid'>('list');

  const handleViewModeToggle = () => {
    setViewMode((prev) => (prev === 'list' ? 'grid' : 'list'));
  };

  const sortedFolders = files
    .filter((file) => file.mimeType === 'application/vnd.google.apps.folder')
    .sort((a, b) => a.name.localeCompare(b.name));

  const sortedFiles = files
    .filter((file) => file.mimeType !== 'application/vnd.google.apps.folder')
    .sort((a, b) => a.name.localeCompare(b.name));

  const sortedItems = [...sortedFolders, ...sortedFiles];

  const renderListView = () => {
    return (
      <List>
        {sortedFolders.map((file) => (
          <FileItem key={file.id} file={file} onClick={onItemClick} />
        ))}
        {sortedFolders.length > 0 && sortedFiles.length > 0 && <Divider />}
        {sortedFiles.map((file) => (
          <FileItem key={file.id} file={file} onClick={onItemClick} />
        ))}
      </List>
    );
  };

  const renderGridView = () => {
    return (
      <Grid container spacing={2}>
        {sortedItems.map((file) => (
          <Grid item xs={12} sm={6} md={4} key={file.id}>
            <FileItem file={file} onClick={onItemClick} />
          </Grid>
        ))}
      </Grid>
    );
  };

  return (
    <DialogContent>
      <Button
        className={classes.viewSwitchButton}
        startIcon={viewMode === 'list' ? <ViewModuleIcon /> : <ViewListIcon />}
        onClick={handleViewModeToggle}
      >
        {viewMode === 'list' ? 'Switch to Grid View' : 'Switch to List View'}
      </Button>
      {viewMode === 'list' ? renderListView() : renderGridView()}
    </DialogContent>
  );
};

export default DialogContentComponent;



import React, { useState } from 'react';
import { Dialog } from '@material-ui/core';
import DialogTitleComponent from './DialogTitleComponent';
import DialogContentComponent from './DialogContentComponent';
import DialogActionsComponent from './DialogActionsComponent';
import FileItem from './FileItem';
import { FileObject, FilePickerDialogProps } from './types';

const FilePickerDialog: React.FC<FilePickerDialogProps> = ({ open, onClose, files }) => {
  const [currentFolder, setCurrentFolder] = useState<string | null>(null);
  const [breadcrumbs, setBreadcrumbs] = useState<FileObject[]>([]);

  const handleFolderClick = (folder: FileObject) => {
    setCurrentFolder(folder.id);
    setBreadcrumbs([...breadcrumbs, folder]);
  };

  const handleFileClick = (file: FileObject) => {
    console.log('Selected file:', file);
  };

  const handleBackClick = () => {
    const newBreadcrumbs = [...breadcrumbs];
    newBreadcrumbs.pop();
    setBreadcrumbs(newBreadcrumbs);
    setCurrentFolder(newBreadcrumbs[newBreadcrumbs.length - 1]?.id || null);
  };

  const handleClick = (file: FileObject) => {
    if (file.mimeType === 'application/vnd.google.apps.folder') {
      handleFolderClick(file);
    } else {
      handleFileClick(file);
    }
  };

  const handleClose = () => {
    setCurrentFolder(null);
    setBreadcrumbs([]);
    onClose();
  };

  const visibleFiles = files.filter(
    (file) => (currentFolder === null && !file.parents) || (file.parents && file.parents.includes(currentFolder))
  );

  return (
    <Dialog open={open} onClose={handleClose} fullWidth maxWidth="sm">
      <DialogTitleComponent
        breadcrumbs={breadcrumbs}
        onBackClick={handleBackClick}
        backButtonDisabled={!breadcrumbs.length}
      />
      <DialogContentComponent files={visibleFiles} onItemClick={handleClick} />
      <DialogActionsComponent onClose={handleClose} />
    </Dialog>
  );
};

export default FilePickerDialog;




import React from 'react';
import { DialogActions, Button } from '@material-ui/core';

interface DialogActionsComponentProps {
  onClose: () => void;
}

const DialogActionsComponent: React.FC<DialogActionsComponentProps> = ({ onClose }) => {
  return (
    <DialogActions>
      <Button onClick={onClose} color="primary">
        Cancel
      </Button>
    </DialogActions>
  );
};

export default DialogActionsComponent;


import React from 'react';
import { DialogTitle, IconButton, makeStyles } from '@material-ui/core';
import { ArrowBack as ArrowBackIcon } from '@material-ui/icons';

interface DialogTitleComponentProps {
  breadcrumbs: { id: string; name: string }[];
  onBackClick: () => void;
  backButtonDisabled: boolean;
}

const useStyles = makeStyles((theme) => ({
  dialogTitle: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
}));

const DialogTitleComponent: React.FC<DialogTitleComponentProps> = ({ breadcrumbs, onBackClick, backButtonDisabled }) => {
  const classes = useStyles();

  return (
    <DialogTitle disableTypography>
      <div className={classes.dialogTitle}>
        <IconButton edge="start" color="inherit" onClick={onBackClick} disabled={backButtonDisabled}>
          <ArrowBackIcon />
        </IconButton>
        <h2>
          {breadcrumbs.map((folder, index) => (
            <React.Fragment key={folder.id}>
              {index > 0 && ' > '}
              {folder.name}
            </React.Fragment>
          ))}
        </h2>
      </div>
    </DialogTitle>
  );
};

export default DialogTitleComponent;








