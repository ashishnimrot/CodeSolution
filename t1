

KT Document Sharing

Model: GPT-4

User
Write email for KT document sharing 

ChatGPT
Subject: Knowledge Transfer (KT) Document Sharing

Dear [Recipient's Name],

I hope this message finds you in good health and high spirits.

I am writing to share with you the knowledge transfer (KT) document related to our recent project, [project name]. This document contains detailed insights about the project, including specifications, process flow, best practices, challenges faced, and our strategies to overcome those.

This KT document is designed to provide you with comprehensive knowledge about the project and the various aspects associated with it. I trust that this will enhance your understanding and ensure smooth continuation of the work. Whether you are a new member onboarding to the team or an existing member trying to better grasp the project, I hope you find this information helpful.

I have attached the document to this email for your convenience. Please take the time to review the material and do not hesitate to reach out if you have any questions, concerns or if something is unclear. I am more than happy to schedule a follow-up meeting to discuss the document in further detail, should you require it.

The goal is to make this transition as smooth as possible, and your feedback on this process will be highly appreciated. Please share your thoughts about the document and the knowledge transfer process, so we can continue to improve.

Looking forward to hearing your valuable feedback.

Best Regards,

[Your Name]
[Your Position]
[Your Contact Information]


import axios from 'axios';
import { File, FileGroup, Category } from './CustomDrivePicker.types';

const FOLDER_MIME_TYPE = 'application/vnd.google-apps.folder';

type GetFilesOptions = {
  pageToken?: string;
  query?: string;
  fields?: string;
};

const getFiles = async (options?: GetFilesOptions): Promise<File[]> => {
  const { pageToken = undefined, query = undefined, fields = 'nextPageToken, files(id, name, mimeType, modifiedTime, parents)' } = options ?? {};
  const params: any = {
    pageSize: 1000,
    q: query,
    fields,
  };

  if (pageToken) {
    params.pageToken = pageToken;
  }

  const response = await axios.get('https://www.googleapis.com/drive/v3/files', { params });

  const files = response.data.files.map((file: any) => ({
    id: file.id,
    name: file.name,
    mimeType: file.mimeType,
    modifiedTime: new Date(file.modifiedTime),
    parents: file.parents,
  }));

  const nextPageToken = response.data.nextPageToken;

  if (nextPageToken) {
    const nextFiles = await getFiles({ pageToken: nextPageToken, query, fields });
    return [...files, ...nextFiles];
  }

  return files;
};

const groupFilesByCategory = (files: File[]): FileGroup[] => {
  const groupedFiles: FileGroup[] = [];

  files.forEach((file) => {
    if (file.mimeType === FOLDER_MIME_TYPE) {
      const folderStructure = getFolderStructure(file, files);
      const existingGroup = groupedFiles.find((group) => group.category === folderStructure);

      if (existingGroup) {
        existingGroup.files.push(file);
      } else {
        groupedFiles.push({ category: folderStructure, files: [file] });
      }
    } else {
      const existingGroup = groupedFiles.find((group) => group.category === Category.MyDrive);

      if (existingGroup) {
        existingGroup.files.push(file);
      } else {
        groupedFiles.push({ category: Category.MyDrive, files: [file] });
      }
    }
  });

  return groupedFiles;
};

const getFolderStructure = (file: File, allFiles: File[]): string => {
  const parentFolders = file.parents ? file.parents.map((parentId) => allFiles.find((f) => f.id === parentId)) : [];

  if (parentFolders.some((folder) => !folder)) {
    return Category.Unknown;
  }

  const folderNames = parentFolders.map((folder) => folder!.name);
  folderNames.push(file.name);

  return folderNames.join(' > ');
};

const getFilesWithNestedFolders = async (): Promise<FileGroup[]> => {
  const files = await getFiles({ query: "mimeType != 'application/vnd.google-apps.folder'", fields: 'files(id, name, mimeType, modifiedTime, parents)' });
  const nestedFiles = await getFiles({ query: "mimeType = 'application/vnd.google-apps.folder'", fields: 'files(id, name, mimeType, modifiedTime, parents)' });

  const allFiles = [...files, ...nestedFiles];
  const groupedFiles = groupFilesByCategory(allFiles);

  return groupedFiles;
};

export default getFilesWithNestedFolders;
