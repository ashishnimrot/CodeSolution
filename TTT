// Module.types.ts

export interface Service {
  icon: string;
  name: string;
  description: string;
}

export interface ModuleProps {
  services: Service[];
}


// Module.styles.ts

import { styled } from '@mui/system';
import { Button as MuiButton, Box as MuiBox } from '@mui/material';

export const Button = styled(MuiButton)({
  // you can add your own styles here
});

export const Box = styled(MuiBox)({
  // you can add your own styles here
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  justifyContent: 'center',
  height: '100vh'
});


// Module.tsx

import React from 'react';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemText from '@mui/material/ListItemText';
import ListItemAvatar from '@mui/material/ListItemAvatar';
import Avatar from '@mui/material/Avatar';
import Typography from '@mui/material/Typography';
import { ModuleProps } from './Module.types';
import { Button, Box } from './Module.styles';

const Module: React.FC<ModuleProps> = ({ services }) => {
  if (services.length === 0) {
    return (
      <Box>
        <Button variant="contained" color="primary">
          CONNECT A SERVICE
        </Button>
      </Box>
    );
  } else {
    return (
      <List>
        {services.map((service, index) => (
          <ListItem key={index}>
            <ListItemAvatar>
              <Avatar src={service.icon} />
            </ListItemAvatar>
            <ListItemText
              primary={service.name}
              secondary={
                <Typography
                  sx={{ display: 'inline' }}
                  component="span"
                  variant="body2"
                  color="text.primary"
                >
                  {service.description}
                </Typography>
              }
            />
          </ListItem>
        ))}
      </List>
    );
  }
}

export default Module;



=============================
// ServiceListItem.styles.ts

import { styled } from '@mui/system';
import { Card as MuiCard } from '@mui/material';

export const Card = styled(MuiCard)(({ theme }) => ({
  width: '90%',
  marginLeft: 'auto',
  marginRight: 'auto',
  borderLeft: '4px solid #D68910',
  marginBottom: theme.spacing(2),
  display: 'flex',
  justifyContent: 'space-between',
  alignItems: 'center',
}));


// ServiceListItem.tsx

import React from 'react';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import IconButton from '@mui/material/IconButton';
import MoreVertIcon from '@mui/icons-material/MoreVert';
import { Service } from './Module.types';
import { Card } from './ServiceListItem.styles';

interface ServiceListItemProps {
  service: Service;
}

const ServiceListItem: React.FC<ServiceListItemProps> = ({ service }) => {
  return (
    <Card>
      <CardContent>
        <Typography variant="h5" component="div">
          {service.name}
        </Typography>
        <Typography variant="body2" color="text.secondary">
          {service.description}
        </Typography>
      </CardContent>
      <IconButton>
        <MoreVertIcon />
      </IconButton>
    </Card>
  );
}

export default ServiceListItem;



==========================================================
// ServiceListItem.styles.ts

import { styled } from '@mui/system';
import { Card as MuiCard } from '@mui/material';

export const Card = styled(MuiCard)(({ theme }) => ({
  width: '90%',
  marginLeft: 'auto',
  marginRight: 'auto',
  borderLeft: '4px solid #D68910',
  marginBottom: theme.spacing(2),
  display: 'flex',
  justifyContent: 'space-between',
  alignItems: 'center',
}));

export const CardContentWrapper = styled('div')({
  display: 'flex',
  alignItems: 'center',
});


// ServiceListItem.tsx

import React from 'react';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import IconButton from '@mui/material/IconButton';
import MoreVertIcon from '@mui/icons-material/MoreVert';
import { Service } from './Module.types';
import { Card, CardContentWrapper } from './ServiceListItem.styles';

interface ServiceListItemProps {
  service: Service;
}

const ServiceListItem: React.FC<ServiceListItemProps> = ({ service }) => {
  return (
    <Card>
      <CardContent>
        <CardContentWrapper>
          <img src={service.icon} alt={service.name} style={{ marginRight: '10px' }} />
          <div>
            <Typography variant="h5" component="div">
              {service.name}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {service.description}
            </Typography>
          </div>
        </CardContentWrapper>
      </CardContent>
      <IconButton>
        <MoreVertIcon />
      </IconButton>
    </Card>
  );
}

export default ServiceListItem;

======================================================================================
import * as React from 'react';
import { useForm, Controller, Control } from "react-hook-form";
import Button from '@mui/material/Button';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogTitle from '@mui/material/DialogTitle';
import TextField from '@mui/material/TextField';
import IconButton from '@mui/material/IconButton';
import SearchIcon from '@mui/icons-material/Search';
import Select from '@mui/material/Select';
import MenuItem from '@mui/material/MenuItem';
import Checkbox from '@mui/material/Checkbox';
import FormControlLabel from '@mui/material/FormControlLabel';
import Radio from '@mui/material/Radio';
import RadioGroup from '@mui/material/RadioGroup';
import { DatePicker } from '@mui/lab';

interface Field {
  name: string;
  label: string;
  type: 'text' | 'search' | 'select' | 'checkbox' | 'radio' | 'date';
  defaultValue?: any;
  options?: string[];  // for select and radio type
  multiline?: boolean; // only for text type
}

interface GenericDialogFormProps {
  title: string;
  open: boolean;
  handleClose: () => void;
  fields: Field[];
  onSubmit: (data: any) => void;
}

const GenericDialogForm: React.FC<GenericDialogFormProps> = ({ title, open, handleClose, fields, onSubmit }) => {
  const { handleSubmit, control } = useForm();

  const submitForm = (data: any) => {
    onSubmit(data);
    handleClose();
  };

  const renderField = (field: Field) => {
    switch (field.type) {
      case 'text':
      case 'search':
        return (
          <TextField
            label={field.label}
            multiline={field.multiline}
            type={field.type}
            InputProps={field.type === 'search' ? {
              endAdornment: (
                <IconButton>
                  <SearchIcon />
                </IconButton>
              ),
            } : {}}
          />
        );
      case 'select':
        return (
          <Select>
            {field.options?.map(option => <MenuItem key={option} value={option}>{option}</MenuItem>)}
          </Select>
        );
      case 'checkbox':
        return <FormControlLabel control={<Checkbox />} label={field.label} />;
      case 'radio':
        return (
          <RadioGroup>
            {field.options?.map(option => <FormControlLabel key={option} value={option} control={<Radio />} label={option} />)}
          </RadioGroup>
        );
      case 'date':
        return <DatePicker label={field.label} />;
      default:
        return null;
    }
  };

  return (
    <Dialog open={open} onClose={handleClose}>
      <DialogTitle>{title}</DialogTitle>
      <DialogContent>
        <form onSubmit={handleSubmit(submitForm)}>
          {fields.map((field) => (
            <Controller
              key={field.name}
              name={field.name}
              control={control as Control}
              defaultValue={field.defaultValue || ""}
              render={({ field: controlledField }) => renderField({...field, ...controlledField})}
            />
          ))}
          <DialogActions>
            <Button onClick={handleClose}>Cancel</Button>
            <Button type="submit">Connect</Button>
          </DialogActions>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default GenericDialogForm;
